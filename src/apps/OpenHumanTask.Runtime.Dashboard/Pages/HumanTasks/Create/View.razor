@*
    Copyright © 2022-Present The Open Human Task Specification Authors. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/tasks/templates/{taskTemplateId}/create"
@page "/tasks/instances/create"
@using OpenHumanTask.Runtime.Integration.Commands.HumanTasks
@attribute [Authorize]
@inherits StatefulComponentBase<HumanTaskState>
@inject NavigationManager NavigationManager
@inject IBreadcrumbManager BreadcrumbManager

<PageTitle>Create new task</PageTitle>

<LeftMenu>
    <button class="btn btn-outline-dark" @onclick="OnCreateHumanTask">Create</button>
</LeftMenu>

@if(command != null)
{
    <div>
        <table class="table table-striped table-bordered">
            <tbody>
                <tr>
                    <td title="The human task template to instanciate.">Template</td>
                    <td>
                        <HumanTaskTemplateSelector 
                        SelectedTemplateId="@(command.TemplateReference == null ? null : $"{command.TemplateReference.Namespace}.{command.TemplateReference.Name}")" 
                        SelectedTemplateVersion="@(command.TemplateReference == null ? null : command.TemplateReference.Version)" />
                    </td>
                </tr>
                <tr title="The business key of the human task to create. If set, will pontentially override settings defined by the template.">
                    <td>Key</td>
                    <td><input type="text" placeholder="Key" value="@command.Key" @onchange="e => OnPropertyChanged(c => c.Key = (string?)e.Value)" class="form-control" /></td>
                </tr>
                <tr title="The priority of the human task to create. If set, will pontentially override settings defined by the template.">
                    <td>Priority</td>
                    <td><input type="number" step="1" min="0" placeholder="Priority" value="@command.Priority" @onchange="e => OnPropertyChanged(c => c.Priority = (string.IsNullOrWhiteSpace((string?)e.Value) ? null : int.Parse((string)e.Value)))" class="form-control" /></td>
                </tr>
                <tr title="Configures the people to assign to the task to create. If set, will pontentially override settings defined by the template.">
                    <td colspan="2">Assignments</td>
                </tr>
                <tr>
                    <td colspan="2">

                    </td>
                </tr>
                <tr title="The data to input to the task to create">
                    <td colspan="2">Input</td>
                </tr>
                <tr>
                    <td colspan="2">

                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {

    private IDisposable? subscription;
    private CreateHumanTaskCommand? command;

    [Parameter] public string? TaskTemplateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.BreadcrumbManager.Use(Breadcrumbs.HumanTaskTemplates);
        this.BreadcrumbManager.AddItem(new BreadcrumbItem("New", $"/tasks/instances/create"));
        this.subscription = this.Feature
            .Subscribe(state =>
            {
                this.command = state.Command;
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new InitializeState(new(this.TaskTemplateId)));
    }

    void OnPropertyChanged(Action<CreateHumanTaskCommand> patch)
    {
        this.Dispatcher.Dispatch(new PatchCommand(patch));
    }

    void OnCreateHumanTask()
    {
        if (this.command == null) return;
        this.Dispatcher.Dispatch(new CreateHumanTask(this.command));
    }

}
