@*
    Copyright © 2022-Present The Open Human Task Specification Authors. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace OpenHumanTask.Runtime.Dashboard.Components
@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager
@inject IApplicationStatusMonitor ApplicationStatusMonitor

<nav class="header navbar navbar-expand-lg flex-row navbar-dark bg-dark">
    <a class="navbar-brand d-flex flex-row align-items-center justify-content-center" href="https://github.com/openhumantask/runtime" target="_blank">
        <img src="/img/logo_white.svg" height="35" />
    </a>
    <div class="navbar-collapse @NavMenuCssClass">

        @if (isUserAuthenticated)
        {
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <small class="bi bi-house" aria-hidden="true"></small><span class="btn-label">Home</span>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="tasks/templates" Match="NavLinkMatch.Prefix">
                        <small class="bi bi-file-code" aria-hidden="true"></small><span class="btn-label">Task Templates</span>
                    </NavLink>
                </li>
            </ul>
        }

        <div class="ms-auto d-flex align-items-center h-100">

            <h4 class="bi-plugin mx-3 my-0 p-0 @(isApplicationOnline ? "text-success" : "text-danger")"></h4>

            @if (isUserAuthenticated)
            {
                <DropdownMenu DropDownMenuTag="ul">
                    <Header>
                        <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">@username</button>
                    </Header>
                    <Body>
                    <li><a class="dropdown-item">Profile</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a @onclick="LogoutAsync" class="dropdown-item">Logout</a></li>
                    </Body>
                </DropdownMenu>
            }
            else
            {
                <a href="/authentication/login" class="btn btn-outline-light text-light ms-auto">Login</a>
            }
        </div>

    </div>
    <button class="navbar-toggler" @onclick="OnToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private AuthenticationState? authenticationState;
    private bool isApplicationOnline;

    [CascadingParameter]
    private Task<AuthenticationState> GetAuthenticationStateAsync { get; set; } = null!;

    private bool isUserAuthenticated => authenticationState != null && authenticationState.User?.Identity?.IsAuthenticated == true;

    private string? username => this.authenticationState == null ? null : authenticationState.User.HasClaim(c => c.Type == JwtClaimTypes.PreferredUserName) ? authenticationState.User.FindFirst(JwtClaimTypes.PreferredUserName)!.Value : authenticationState.User.Identity!.Name;

    protected override async Task OnInitializedAsync()
    {
        this.authenticationState = await this.GetAuthenticationStateAsync;
        this.AuthenticationStateProvider.AuthenticationStateChanged += async _ =>
        {
            this.authenticationState = await this.GetAuthenticationStateAsync;
            this.StateHasChanged();
        };
        this.ApplicationStatusMonitor.OnOnlineStatusChanged += this.OnOnlineStatusChanged!;
        await this.ApplicationStatusMonitor.InitializeAsync();
        await base.OnInitializedAsync();
    }

    private void OnToggleNavMenu()
    {
        this.collapseNavMenu = !this.collapseNavMenu;
    }

    private void OnOnlineStatusChanged(object sender, bool isOnline)
    {
        this.isApplicationOnline = isOnline;
        this.StateHasChanged();
    }

    private async Task LogoutAsync(MouseEventArgs args)
    {
        await this.SignOutManager.SetSignOutState();
        this.NavigationManager.NavigateTo("/authentication/logout");
    }

}
